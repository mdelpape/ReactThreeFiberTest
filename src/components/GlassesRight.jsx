/* eslint-disable react/prop-types */
/* eslint-disable react/no-unknown-property */
/* eslint-disable no-unused-vars */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public/models/glasses2.glb --transform
Files: public/models/glasses2.glb [3.02MB] > glasses2-transformed.glb [104.91KB] (97%)
*/

import React, { useRef, useLayoutEffect } from 'react'
import { useGLTF, useScroll } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import gsap from 'gsap';
import * as THREE from 'three';


const FLOOR_HEIGHT = 4;
const NB_FLOORS = 4;

export function GlassesRight(props) {
  const { nodes, materials } = useGLTF('/glasses2-transformed.glb')
  const ref = useRef()
  const tl = useRef()

  const scroll = useScroll();

  useFrame(() => {
    const newY = props.position[1] + FLOOR_HEIGHT * (NB_FLOORS - 1) * scroll.offset;
    ref.current.position.y = newY;

    const startingRotation = props.rotation[1];
    ref.current.rotation.y = startingRotation + (Math.PI * Math.PI) * (scroll.offset / 2);
  })

  useLayoutEffect(() => {
    tl.current = gsap.timeline();

    // Vertical Animation
    tl.current.to(
      ref.current.position,
      {
        duration: 1,
        y: props.position[1] - FLOOR_HEIGHT * (NB_FLOORS - 1),
      },
      0
    );

  }, [props.position]);

  useLayoutEffect(() => {
    const loader = new THREE.CubeTextureLoader();
    const texture = loader.load([
      '/map/1.jpg',
      '/map/2.jpg',
      '/map/3.jpg',
      '/map/4.jpg',
      '/map/5.jpg',
      '/map/6.jpg',
    ]);

    texture.encoding = THREE.sRGBEncoding;
    texture.format = THREE.RGBAFormat;
    texture.type = THREE.UnsignedByteType;
    texture.minFilter = THREE.LinearFilter;

    // Assign environment map to "Advanced Glass" material
    if (materials['Advanced Glass']) {
      materials['Advanced Glass'].envMap = texture;
      materials['Advanced Glass'].reflectivity = 1; // Adjust reflectivity
      materials['Advanced Glass'].roughness = 0; // Adjust roughness for clearer reflection
      materials['Advanced Glass'].metalness = 1; // Adjust metalness
      materials['Advanced Glass'].needsUpdate = true;
  }

  }, [materials]);





  return (
    <group {...props} dispose={null} ref={ref}>
      <group position={[0, 0, 0.018]} scale={0.02}>
        <mesh geometry={nodes.Plane011.geometry} material={materials['iMeshh Gold']} />
        <mesh geometry={nodes.Plane011_1.geometry} material={materials['iMeshh Metal']} />
        <mesh geometry={nodes.Plane011_2.geometry} material={materials['Advanced Glass']} />
        <mesh geometry={nodes.Plane011_3.geometry} material={materials['Plastic Gloss Black']} />
      </group>
    </group>
  )
}

useGLTF.preload('/glasses2-transformed.glb')
